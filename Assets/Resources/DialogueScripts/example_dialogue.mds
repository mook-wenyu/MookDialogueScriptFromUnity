// ==========================================================
// MookDialogueScript 语法参考
// ==========================================================
// 本文档展示脚本语言的所有语法规则和使用方法
// 可作为编写对话脚本的快速参考

--- start
// ----------- 变量系统 -----------

// 1. 变量定义 - 使用var命令，变量名以$开头
var $name "玩家"
// 字符串类型
var $hp 100
// 数字类型
var $has_item false
// 布尔类型
var $has_sword false
// 是否拥有剑
var $has_shield false
// 是否拥有盾

// 2. 变量操作
set $hp 80
// 设置变量值
add $hp 20
// 增加变量值
sub $hp 10
// 减少变量值
mul $hp 2
// 乘以倍数
div $hp 2
// 除以数值

// 重复声明 无效
var $name "狗剩子"
call log($name)

// ----------- 内置CS对象访问 -----------

// 1. 访问玩家对象属性
call log("玩家名称: {$player__Name}")
// 访问Name属性
call log("玩家等级: {$player__Level}")  
// 访问Level属性
call log("玩家生命值: {$player__Health}")
// 访问Health属性

// 2. 在文本中使用玩家属性
这是一个在文本中使用对象属性的例子\：勇者{$player__Name}当前等级为{$player__Level}，生命值为{$player__Health}。

// 3. 访问游戏系统静态变量
call log("游戏版本: {$GameVersion}")
// 访问GameVersion属性
call log("游戏难度: {$GameDifficulty}")
// 访问GameDifficulty属性
call log("调试模式: {$IsDebugMode}")
// 访问IsDebugMode属性

// ----------- 文本与标签 -----------

// 1. 旁白文本 - 直接书写
这是一段旁白文本。 #场景描述

// 2. 带标签的旁白 - 使用#添加标签
这是一段有标签的旁白。 #场景 #介绍 #教程

// 3. 变量插值 - 使用插入变量
你好，{$name}。你的生命值是{$hp}点。

// ----------- 对话系统 -----------

// 1. 基本对话 - 角色名:对话内容
NPC: 这是一段{true eq true}普通对话。

// 2. 带情绪的对话 - 角色名[情绪]:对话内容
NPC[高兴]: 这是一段带情绪{$fault_tolerant}的对话！
NPC[生气]: 这是另一种情绪的对话。 #重要对话

// ----------- 选择分支 -----------

// 1. 基本选项 - 使用->标记选项
-> 选项一
    NPC: 你选择了选项一。
-> 选项二
    NPC: 你选择了选项二。
    
// 2. 嵌套选项
-> 主选项
    NPC: 你想了解什么？
        -> 子选项1
            NPC: 这是子选项1的回答。
        -> 子选项2
            NPC: 这是子选项2的回答。

// 3. 条件选项 - 使用[if 条件]
-> 普通选项
    NPC: 这个选项总是可见的。
-> 特殊选项 [if $has_item]
    NPC: 你使用了特殊物品！
// 只有当$has_item为true时才会显示此选项

// ----------- 节点跳转 -----------

// 1. 节点跳转 - 使用=>
-> 跳转到其他节点
    => other_node
-> 继续当前对话
    NPC: 继续当前节点的对话。

// ----------- 条件语句 -----------

// 1. if语句
if $hp > 80
    NPC: 你的状态很好！
endif

// 2. if-else语句
if $hp > 50
    NPC: 你状态不错。
else
    NPC: 你需要休息。
endif

// 3. if-elif-else语句
if $hp > 80
    NPC: 你状态极佳！
elif $hp > 50
    NPC: 你状态良好。
elif $hp > 20
    NPC: 你需要休息。
else
    NPC: 你需要立即治疗！
endif

// 4. 条件运算符
// 比较运算符：
// ==  或 eq 或 is    : 等于
// !=  或 neq         : 不等于
// >   或 gt          : 大于
// <   或 lt          : 小于
// >=  或 gte         : 大于等于
// <=  或 lte         : 小于等于
// 逻辑运算符：
// &&  或 and         : 与
// ||  或 or          : 或
// !   或 not         : 非
// ^   或 xor         : 异或

// 使用符号运算符
if $hp > 20 && $has_item
    NPC: 你有足够的生命值和必要的物品。
endif

// 使用语义运算符（更易读）
if $hp gt 20 and $has_item
    NPC: 你有足够的生命值和必要的物品。
endif

// 使用混合运算符（完全等价）
if $hp gte 20 || not $has_item
    NPC: 你的生命值足够，或者没有携带物品。
endif

// 使用 is/eq 进行相等性比较
if $player__Name is "勇者"
    NPC: 原来你就是预言中的勇者！
endif

// 使用 neq 进行不相等比较
if $GameDifficulty neq 1
    NPC: 这不是简单难度，请小心！
endif

// 使用 xor 进行异或操作
if $has_sword xor $has_shield
    NPC: 你只装备了一样装备，要不要考虑都装备上？
endif

// ----------- 函数调用 -----------

// 1. 基本函数调用 - 使用call
call log("这是一条日志")

// ----------- 简单游戏场景示例 -----------

// 使用游戏中的金币变量
if $gold >= 50
    商人: 你有{$gold}金币，可以购买这把剑。
    -> 购买
        sub $gold 50
        set $has_item true
        商人: 交易完成！这是你的新剑。
    -> 不购买
        商人: 如果改变主意，随时欢迎。
else
    商人: 这把剑售价50金币，你只有{$gold}金币，不够呢。
endif

// ----------- 等待命令 -----------

// 使用wait暂停对话流程(秒)
wait 2  
// 等待2秒

// 跳转到其他节点， => 和 jump 效果一样
jump other_node
===

// ----------- 注释 -----------

// 单行注释使用双斜杠

// ====================================
// 下面是完整的节点示例
// ====================================

:: other_node
// 这是另一个节点，可以从其他地方跳转到这里

// 简单场景示例
这是一个古老的神殿，墙壁上刻满了神秘的符文。 #场景 #神殿

NPC: 欢迎来到古代神殿，旅行者。

// 使用游戏难度进行判断
if $GameDifficulty > 1
    NPC: 警告！这里的挑战难度较高，请小心前进。
else
    NPC: 这是一个适合初学者的地方，你可以在这里安全地探索。
endif

// 玩家可以选择的行动
-> 查看符文
    NPC: 符文上记载着古老的知识和力量。
    if $player__Level >= 3
        NPC: 以你目前的等级，可以理解一些基础符文。
    else
        NPC: 但你目前的等级还不足以理解其中奥秘。
    endif
-> 继续探索
    NPC: 你深入神殿内部，发现了更多的秘密。
-> 离开神殿
    NPC: 你决定暂时离开神殿，也许以后再回来探索。

// 返回起始节点
-> 返回
    => start
-> 结束
    => end

--- end
// 结束节点

这是语法示例的结尾。希望对你编写对话脚本有所帮助！ #结束
===