// ==========================================================
// MookDialogueScript 语法参考
// ==========================================================
// 本文档展示脚本语言的所有语法规则和使用方法
// 可作为编写对话脚本的快速参考

// 关键字说明：
// 1. 条件控制：if, elif, else, endif
// 2. 布尔值：true, false
// 3. 变量操作：var, set, add, sub, mul, div, mod
// 4. 跳转控制：=>, jump
// 5. 函数调用：call
// 6. 等待控制：wait
// 7. 比较运算：
//    - 等于：== 或 eq 或 is
//    - 不等于：!= 或 neq
//    - 大于：> 或 gt
//    - 小于：< 或 lt
//    - 大于等于：>= 或 gte
//    - 小于等于：<= 或 lte
// 8. 逻辑运算：
//    - 与：&& 或 and
//    - 或：|| 或 or
//    - 非：! 或 not
//    - 异或：^ 或 xor

// 注释说明：
// 1. 所有注释必须单独一行
// 2. 注释以 // 开头
// 3. 注释可以放在任何位置
// 4. 注释不会影响脚本执行

// 变量系统说明：
// 1. 变量定义使用 var 命令
// 2. 变量名必须以 $ 开头
// 3. 支持字符串、数字、布尔三种类型
// 4. 变量可以用于条件判断和文本插值
// 5. 可以通过C#代码注册变量，使用[ScriptVar]特性标记
// 6. 脚本变量和C#变量可以互相访问和修改
// 7. 对象变量使用 $object__property 格式访问，如 $player__name

// 函数系统说明：
// 1. 可以通过C#代码注册函数，使用[ScriptFunc]特性标记
// 2. 支持调用C#中定义的方法
// 3. 支持异步函数调用
// 4. 内置了一些常用函数，如：
//    - log(message, type) - 输出日志
//    - random() - 生成随机数
//    - concat(str1, str2, ...) - 连接字符串
// 5. 调用函数时必须使用 call 关键字，如：call log("消息", "类型")
// 6. 对象函数使用 object__method 格式调用，如：call player__get_status()
// 7. 在表达式或插值中使用函数时，不需要 call 关键字

// 对话系统说明：
// 1. 基本对话格式：角色名: 对话内容
// 2. 带情绪对话格式：角色名[情绪]: 对话内容
// 3. 旁白文本直接书写
// 4. 标签是可选的，格式为 #标签1 #标签2，用空格分隔，必须在对话后的同一行
// 5. 对话可以嵌套节点内容，使用缩进控制
// 6. 必须缩进在对话内容中，表示属于该对话

// 选择分支说明：
// 1. 选项使用 -> 标记
// 2. 选项可以嵌套，使用缩进控制
// 3. 选项可以添加条件，格式为 -> 选项内容 [if 表达式]
// 4. 选项可以跳转到其他节点
// 5. 选项可以嵌套节点内容，使用缩进控制
// 6. 必须缩进在选项内容中，表示属于该选项

// 条件语句说明：
// 1. 支持 if/elif/else/endif 结构
// 2. 支持多种比较运算符
// 3. 支持逻辑运算符
// 4. 支持变量和常量比较
// 5. 必须缩进在条件语句中，表示属于该条件语句

// 节点系统说明：
// 1. 节点定义方式：
//    :: 节点名
//    内容
//    ===
//    或
//    --- 节点名
//    内容
//    ===
//    或
//    ---
//    [title: 节点名]
//    内容
//    ===
// 2. === 是可选的，但建议写完整
// 3. 节点内容可以包含：
//    - 变量定义和操作
//    - 场景描述（旁白文本）
//    - 角色对话
//    - 条件语句
//    - 选项分支
//    - 节点跳转
// 4. 对话和选项可以嵌套节点内容，使用缩进控制
// 5. 节点元数据：
//    - 使用 [key:value] 格式定义
//    - 必须紧跟在节点名称之后一行或连续多行
//    - 用于存储节点的附加信息
//    - 如果有title元数据，会覆盖节点名称


// 完整对话示例开始
---
[title: start]
// 定义变量
var $player_name "冒险者"
var $player_level 1
var $gold 100
var $has_sword false
var $has_shield false
var $is_vip false

// 场景描述
:这是一个宁静的小镇，阳光明媚，街道上人来人往。

// 商人对话
商人: 欢迎来到我的商店，{$player_name}。

// 根据玩家等级显示不同对话
if $player_level < 5
    商人: 看起来你是个新手冒险者，需要一些基础装备吗？
else
    商人: 欢迎回来，经验丰富的冒险者！需要什么装备？
endif

// 商品选择
商人: 我们这里有各种武器，最受欢迎的是这把铁剑，只要50金币。 #武器 #铁剑
    if $gold >= 50
        -> 购买铁剑
            sub $gold 50
            set $has_sword true
            商人: 交易完成！这是你的铁剑。 #交易 #完成
            商人: 现在你有了武器，可以去冒险了！ #建议 #冒险
        -> 不购买
            商人: 没关系，随时欢迎你回来。 #告别
    else
        商人: 抱歉，你的金币不够。这把剑需要50金币。 #抱歉 #金币不足
    endif

// 使用C#函数示例
商人: 让我看看今天的运气如何...
    call log("商人正在查看运气", "log")
    // 等待2秒，增加对话的节奏感
    wait 2
    if random() > 0.5
        商人: 今天运气不错，给你打个折！
        mul $gold 1.2
    else
        商人: 今天运气一般，价格不变。
    endif

// 演示对象变量和函数调用
商人: 让我看看您的角色信息。
// 等待0.5秒，增加对话的节奏感
wait 0.5
商人: 您的名称是 {$player__name}，等级是 {$player__level}。
商人: 您的状态是：{player__get_status()}
    call player__take_damage(5)
    商人: 您受到了一点伤害，现在状态是：{player__get_status()}
    call player__heal(10)
    商人: 已经为您治疗，现在状态是：{player__get_status()}

// VIP专属商品
商人: 我们还有一些特殊商品，只对VIP客户开放。
    -> 查看VIP商品 [if $is_vip]
        商人: 这是我们的VIP专属商品，价格优惠！
    -> 成为VIP [if not $is_vip]
        商人: 成为VIP需要100金币，要现在办理吗？
            if $gold >= 100
                -> 办理VIP
                    sub $gold 100
                    set $is_vip true
                    商人: 恭喜你成为VIP会员！
                -> 暂时不办理
                    商人: 好的，随时欢迎你回来办理。
            else
                商人: 抱歉，你的金币不够。成为VIP需要100金币。
            endif

// 装备检查
if $has_sword and $has_shield
    商人: 你已经装备齐全了，可以去冒险了！
elif $has_sword
    商人: 你有了武器，但还需要一个盾牌来保护自己。
elif $has_shield
    商人: 你有了盾牌，但还需要一把武器来战斗。
else
    商人: 建议你至少购买一件装备，这样更安全。
endif

// 跳转到其他节点
商人: 你接下来要做什么？
    -> 继续冒险
        => adventure_start
    -> 结束对话
        => end
===

--- adventure_start
// 冒险开始场景
:这是一个神秘的森林入口，树木高耸入云，进入次数 {visit_count('adventure_start')} 次。
call log(concat("进入次数 ", visit_count('adventure_start'), " 次"))

// 根据装备情况显示不同对话
if $has_sword and $has_shield
    向导: 你看起来装备精良，{$player_name}。森林里很危险，但你应该能应付。
elif $has_sword or $has_shield
    向导: 你有一些装备，但还不够完善。要小心行事。
else
    向导: 你没有任何装备就进入森林？这太危险了！
endif

向导: 你决定怎么做？
    -> 进入森林
        向导: 祝你好运，{$player_name}！
        => forest_exploration
    -> 返回小镇
        向导: 明智的选择，准备好再来吧。
        => start
    -> 结束冒险
        => end
===

--- forest_exploration
// 森林探索场景
:森林深处，光线变得昏暗，四周传来奇怪的声音。

// 随机事件
if $has_sword
    :你遇到了一只野狼，幸好有剑在手，成功击退了它。
else
    :你遇到了一只野狼，没有武器只能逃跑。
endif

向导: 前面似乎有座古老的遗迹，你要继续前进吗？
    -> 深入森林
        向导: 前面似乎有座古老的遗迹。
        => ancient_ruins
    -> 返回入口
        向导: 明智的选择，森林太危险了。
        => adventure_start
    -> 结束探索
        => end
===

:: ancient_ruins
// 遗迹场景
:一座破败的古代遗迹矗立在眼前，石墙上刻着神秘的符文。

// 根据等级显示不同对话
if $player_level >= 5
    向导: 这些符文似乎记载着强大的魔法，以你的等级应该能理解一些。
else
    向导: 这些符文太过深奥，以你目前的等级还无法理解。
endif

向导: 你想做什么？
    -> 研究符文
        if $player_level >= 5
            :你从符文中领悟了一些魔法知识，等级提升了！
            add $player_level 1
        else
            :你试图理解符文，但一无所获。
        endif
    -> 探索遗迹内部
        向导: 遗迹内部可能藏有宝物，但也可能有危险。
        => treasure_room
    -> 离开遗迹
        向导: 也许等实力更强时再来探索。
        => forest_exploration
===

--- treasure_room
// 宝库场景
:一个金光闪闪的宝库，堆满了各种宝物。

// 宝库事件
if $has_sword and $has_shield
    :你成功击败了守护宝库的怪物，获得了100金币！
    add $gold 100
else
    :你被守护宝库的怪物击退了，幸好逃了出来。
endif

向导: 这次冒险到此结束，{$player_name}。你获得了宝贵的经验。

向导: 你要返回小镇吗？
    -> 返回小镇
        => start
    -> 结束冒险
        => end
===

--- end
// 对话结束
向导: 再见，{$player_name}，期待下次见面！
===